generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  // nao mexer >
  id            String   @id @default(uuid()) @map("_id")
  name          String
  email         String   @unique
  emailVerified Boolean?
  image         String?
  role          Role     @default(USER)
  // < nao mexer 

  createdAt DateTime
  updatedAt DateTime
  sessions  Session[]
  accounts  Account[]
  Compra    Compra[]

  @@map("user")
}

model Compra {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  precoTotal Float
  userId     String
  user       User            @relation(fields: [userId], references: [id])
  produtos   CompraProduto[]
}

model Produto {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  nome       String
  descricao  String
  preco      Float
  categorias ProdutoCategoria[]
  compras    CompraProduto[]
}

model Categoria {
  id       String             @id @default(auto()) @map("_id") @db.ObjectId
  nome     String
  produtos ProdutoCategoria[]
}

model CompraProduto {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  compra    Compra  @relation(fields: [compraId], references: [id])
  compraId  String  @db.ObjectId
  produto   Produto @relation(fields: [produtoId], references: [id])
  produtoId String  @db.ObjectId
}

model ProdutoCategoria {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  produto     Produto   @relation(fields: [produtoId], references: [id])
  produtoId   String    @db.ObjectId
  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  categoriaId String    @db.ObjectId
}

// evitar mexer daqui pra baixo:
model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
